// Code generated by "enumer -type=Work -json"; DO NOT EDIT.

package handlers

import (
	"encoding/json"
	"fmt"
)

const _WorkName = "StudentJrEmployeeSrEmployeeCXO"

var _WorkIndex = [...]uint8{0, 7, 17, 27, 30}

func (i Work) String() string {
	i -= 1
	if i < 0 || i >= Work(len(_WorkIndex)-1) {
		return fmt.Sprintf("Work(%d)", i+1)
	}
	return _WorkName[_WorkIndex[i]:_WorkIndex[i+1]]
}

var _WorkValues = []Work{1, 2, 3, 4}

var _WorkNameToValueMap = map[string]Work{
	_WorkName[0:7]:   1,
	_WorkName[7:17]:  2,
	_WorkName[17:27]: 3,
	_WorkName[27:30]: 4,
}

// WorkString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WorkString(s string) (Work, error) {
	if val, ok := _WorkNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Work values", s)
}

// WorkValues returns all values of the enum
func WorkValues() []Work {
	return _WorkValues
}

// IsAWork returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Work) IsAWork() bool {
	for _, v := range _WorkValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Work
func (i Work) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Work
func (i *Work) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Work should be a string, got %s", data)
	}

	var err error
	*i, err = WorkString(s)
	return err
}
