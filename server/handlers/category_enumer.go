// Code generated by "enumer -type=Category -json"; DO NOT EDIT.

package handlers

import (
	"encoding/json"
	"fmt"
)

const _CategoryName = "AllOnlineShoppingFuelTravelFood"

var _CategoryIndex = [...]uint8{0, 3, 17, 21, 27, 31}

func (i Category) String() string {
	if i < 0 || i >= Category(len(_CategoryIndex)-1) {
		return fmt.Sprintf("Category(%d)", i)
	}
	return _CategoryName[_CategoryIndex[i]:_CategoryIndex[i+1]]
}

var _CategoryValues = []Category{0, 1, 2, 3, 4}

var _CategoryNameToValueMap = map[string]Category{
	_CategoryName[0:3]:   0,
	_CategoryName[3:17]:  1,
	_CategoryName[17:21]: 2,
	_CategoryName[21:27]: 3,
	_CategoryName[27:31]: 4,
}

// CategoryString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CategoryString(s string) (Category, error) {
	if val, ok := _CategoryNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Category values", s)
}

// CategoryValues returns all values of the enum
func CategoryValues() []Category {
	return _CategoryValues
}

// IsACategory returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Category) IsACategory() bool {
	for _, v := range _CategoryValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Category
func (i Category) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Category
func (i *Category) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Category should be a string, got %s", data)
	}

	var err error
	*i, err = CategoryString(s)
	return err
}
